import tygronsdk
from tygronsdk import sdk as tygron
from tygronsdk import items as items
from tygronsdk import utilities as utilities
from tygronsdk import interfaces as interfaces




class Script(interfaces.Script):

    def run( self, *args, **kwargs ):
        stored_err = None

        settings = {
            'api_token' : None,
        
            'geoplugin_name' : 'Basis NLCS interpretatie',
            
            'layer_attribute' : 'LAYER',
            'search' : None,
            'replace' : None,
            
            'platform' : 'engine',
            **kwargs
        }
            
        if ( settings['search'] is None ):
            raise Exception('Search parameter missing')
        if ( settings['replace'] is None ):
            raise Exception('Replace parameter missing')
            
        sdk = tygron.sdk( settings )
        auth_result = sdk.authenticate()['base']
        if ( not auth_result ):
            raise Exception('Credentials must be provided, defining "username" and "password". Can either be a json object in "credentials.json", or key-value pairs in "credentials.txt".')

        self.log('This script will rename the layers of a DXF generated by a GeoPlugin, through simple case-sensitive search-replace.')


        sdk = tygron.sdk( {
                'computer_name' : 'Python SDK Script - Rename Geoplugin layers',
                **settings,
                'platform' : settings['platform']
            } )
        sdk.configure_exit( {
                'save_project': False,
                'save_created_project': False,
                'close_session': False,
                'kill_session': False,
                'delete_created_project': False
            } )

        self.log( 'Authenticating API environment using '+str(sdk.data) )
        auth_result = sdk.authenticate()['base']
        if ( auth_result is False ):
            raise Exception('Could not authenticate with provided credentials')
        
        self.log()
        self.log('Renaming layers in GeoPlugin "'+str(settings['geoplugin_name'])+'"')
        self.log('Replacing "'+str(settings['search'])+'"...')
        self.log('   with  "'+str(settings['replace'])+'"')
        self.log()
        

        try:
            
            geoplugin = sdk.session.items.get_matching(items.Geoplugin, settings['geoplugin_name'])
            if ( not (geoplugin.count() == 1) ):
                raise Exception('Unable to find desired GeoPlugin')
            geoplugin = next(item for item in geoplugin)
            self.log(geoplugin.get_data())
        
            geolinks = sdk.session.items.get_matching(items.Geolink, geoplugin.geolink_ids)
            
            attribute_ids=[]
            attribute_names=[]
            attribute_values=[]
            
            for link in geolinks:
                self.log(link.get_data())
                
                values = link.attributes.get(settings['layer_attribute'], None)
                print(link.attributes)
                print(settings['layer_attribute'])
                print(str(values))
                
                if ( (values is None) or (values == []) ):
                    continue
                    
                if ( len( [i for i in values if settings['search'] in i ] ) == 0 ):
                    continue
                    
                attribute_ids.append( link.id )
                attribute_names.append ( settings['layer_attribute'] )
                attribute_values.append( [value.replace(settings['search'], settings['replace']) for value in values] )
             
            print(attribute_ids)
            print(attribute_values)
            
            sdk.session.connector.fire_event(
                    tygronsdk.events.editorgeolink.set_attributes(
                        geolink_id      = attribute_ids,
                        attribute       = attribute_names,
                        attribute_value = attribute_values
                    )
                )
                
            
            geolinks = sdk.session.items.get_matching(items.Geolink, geoplugin.geolink_ids)
            for index, link in enumerate(geolinks):
                self.log('-----')
                self.log(link.get_data())
        
        
        
        except Exception as err:
            self.log('An error has occured')
            stored_err = err
                    
        finally:
            self.log('Closing connections')
            sdk.exit()
            self.log('Connections closed')
            
        if ( not (stored_err is None) ):
            raise stored_err
        

if __name__ == '__main__':
    Script().start()

